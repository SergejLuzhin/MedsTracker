**Данная дорожная карта может редактироваться по мере разработки

# Этап 1. Планирование

## Оглавление
- [1. Цели приложения](#1-цели-приложения)
- [2. Основные пользовательские сценарии](#2-основные-пользовательские-сценарии)
- [3. MVP — первая версия приложения](#3-mvp--первая-версия-приложения)
- [4. Нефункциональные требования](#4-нефункциональные-требования)
- [5. Технические ограничения и допущения](#5-технические-ограничения-и-допущения)
- [6. Потенциальные риски](#6-потенциальные-риски)

---

## 1. Цели приложения

1) Помочь пользователю не забывать какие таблетки и лекарства необходимо принимать и в каких количествах.  
2) Снизить вероятность пропуска приема медикаментов или наоборот передозировки.  
3) Предоставить более удобный способ записи и запоминания своего курса лечения.  

---

## 2. Основные пользовательские сценарии

1) Пользователь добавляет лекарство вручную  
- название  
- иконка или фотография  
- дозировка  
- расписание приема  
- длительность курса  

2) Пользователь добавляет лекарство с помощью фото и ИИ-ассистента  
- ИИ анализирует фотографию препарата или рецепта, выписанного врачом, с множеством препаратов и на основе этого предлагает позиции, которые нужно добавить в приложение. Пользователь может их редактировать  

3) Создание нескольких списков лекарств  
- например: мои лекарства, лекарства для собаки, лекарства для ребенка  

4) Получение напоминаний о приеме  
- push-уведомления на смартфоне  

5) Подтверждение приема  
- пользователь отмечает какие таблетки он уже принял, если этого не сделать, то приложение может уведомить повторно  

6) Возможность просмотреть историю принятых и пропущенных лекарств  
- отдельная вкладка на которой будут отображаться принятые лекарства и пропущенные  

7) Возможность поделиться списком приема таблеток  
- это может быть полезно когда родитель создает список таблеток для ребенка или для старшего поколения  

---

## 3. MVP — первая версия приложения

Для первой версии приложения включить только базовые функции:  
- Добавление лекарств вручную  
- Создание локальных списков лекарств  
- Локальные push-уведомления  
- Экран списка всех текущих лекарств  
- Экран истории принятых/пропущенных лекарств  
- Возможность вручную редактировать и удалять лекарства  

### Функции, которые можно удалить и добавить позже:
- ИИ-функции: скан рецептов, редактирование списков лекарств с помощью ассистента  
- Создание профиля  
- Облачное копирование данных  
- Возможность делиться списками препаратов  
- Альтернативная цветовая тема приложения  
- Реклама в приложении и возможность приобрести расширенную версию  
- Функция разблокировки с помощью пин-кода или FaceID  

---

## 4. Нефункциональные требования

1) **Производительность**  
- Запуск приложения быстрее чем за 3 секунды  
- Уведомления приходят вовремя  
- Приложение должно корректно и плавно работать даже при большом количестве списков и уведомлений  

2) **Надежность и отказоустойчивость**  
- Напоминания должны срабатывать точно в заданное время, даже если приложение закрыто.  
- Приложение должно корректно восстанавливаться после перезапуска или обновления.  
- Потеря данных при сбое недопустима.  

3) **Безопасность**  
- Локальные данные (список лекарств, расписание) должны храниться в защищенном виде  
- Данные в облако должны передаваться по защищенному протоколу.  
- Должна быть возможность блокировать приложение через FaceID/TouchID/код.  

4) **Удобство использования (UX)**  
- Интерфейс должен быть заточен под минимальное количество элементов на экране. Управление должно быть максимально простым и интуитивно понятным  
- Поддержка системных стандартов iOS (Dynamic Type, Dark Mode и др).  
- Базовый функционал, такой как включение уведомлений, добавление новых списков и лекарств должен выполняться в минимальное количество действий и экранов  

5) **Совместимость**  
- Поддерживаемые версии iOS: в зависимости от итогового функционала, но как минимум iOS 16.  
- Корректная работа как на iPhone, так и на iPad.  
- В будущем — перенос на Android с минимальными изменениями.  

6) **Масштабируемость**  
- Архитектура должна позволять добавление новых функций (например, статистика приёма, интеграция с Apple Health).  
- Кодовая база должна быть легко поддерживаемой (чистая архитектура, модульность).  

7) **Поддерживаемость и сопровождение**  
- Код должен быть документирован (README, комментарии внутри кода, документация).  
- Должен присутствовать раздел ответов на частые вопросы и контакты для связи.  
- Настроена система логирования ошибок.  
- Тесты должны покрывать ключевые функции (например юнит-тесты для напоминаний).  

8) **Доступность**  
- Цвета и шрифты должны соответствовать стандартам доступности WCAG 2.1 (контрастность не ниже 4.5:1).  

---

## 5. Технические ограничения и допущения

- Используем Swift + SwiftUI для iOS.  
- Локальные уведомления через UserNotifications Framework.  
- Нет обязательной регистрации и аккаунтов в первой версии.  

---

## 6. Потенциальные риски

- Пользователь может удалить уведомления → пропустит напоминание.  
- Ограничения iOS на фоновые задачи (невозможно «принудительно» показать экран).  
- Возможность дублирования уведомлений при ошибках в расписании.  
- Усложнение при масштабировании на Android (учесть в архитектуре).  

---
